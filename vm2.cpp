// МН - Метод Ньютона
#include <iostream>
#include <cmath>

using namespace std;

// Функция для которой ищем корень
double f(double x)
{
return 3 * cos(2 * x) - x + 0.25;
}

// Производная функции f
double f_prime(double x)
{
return -6 * sin(2 * x) - 1;
}

int main()
{
double eps = 0.001; // Заданная точность
double beta = 0.01; // Параметр метода
double a = 2.5; // Левая граница интервала
double b = 2.9; // Правая граница интервала

double x = (a + b) / 2; // Начальное приближение (середина интервала)

do // Итерационный процесс
{
    double x_new = x - beta * f(x) / f_prime(x); // Вычисляем новое приближение
    if (abs(x_new - x) < eps) // Если разница между предыдущим и новым приближением меньше заданной точности
    {
        x = x_new; // Устанавливаем новое значение корня
        break; // Завершаем итерационный процесс
    }
    x = x_new; // Устанавливаем новое приближение и продолжаем итерационный процесс
} while (true);

cout << "Найденный корень: " << x << endl; // Выводим найденный корень

return 0;

}
